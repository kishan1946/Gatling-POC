############## Application SetUp Start ##############
isThinkEnabled = false
# Scenario 1 >> Take Action On Message Level
tAM_dropDownSortValue = 50
tAM_alert = reviewed
tAM_resolved = true
################ Scenario 1 >> End...! ################

############## Application SetUp End ##############

############## Load Balance SetUp Start ##############
# Scenario 1 >> Inject Take Action On Message Level

# Pause for a given duration
# Pause for a given duration
tAM_nothingFor = 1
# Injects a given number of users with a linear ramp over a given duration
tAM_rampUp = 5
tAM_rampUsersDuringInMin = 2
# Injects users at a constant rate, defined in users per second
tAM_constantUsersPerSec = 50
tAM_constantUsersPerSecDuration = 10
# Injects a given number of users at once
tAM_atOnce = 1
# Injects users from starting rate to target rate, defined in users per second, during a given duration. Users will be injected at regular intervals
tAM_minRampUsersPerSec = 1
tAM_maxRampUsersPerSec = 5
tAM_rampUsersPerSecDuringInMin = 10
# Injects a given number of users following a smooth approximation of the heaviside step function stretched to a given duration
tAM_heavisideUsers = 200
tAM_heavisideUsersDuringInSeconds = 5
# Injects a given number of users with a linear ramp over a given duration
tAM_seqDuringInSec = 5
# constant Concurrent Users
tAM_constantConcurrentUsers = 5
tAM_constantConcurrentUsersDuringInSec = 6
# ramp Concurrent Users
tAM_minRampConcurrentUsers = 1
tAM_maxRampConcurrentUsers = 20
tAM_maxRampConcurrentUsers1 = 1
tAM_rampConcurrentUsersDuringInSec = 300
# Throttling ensures required req/s will be accomplished. Scenario should run forever, numberOfRepetitions=-1
tAM_reachRps = 50
tAM_reachRpsDurationMinutes = 5
# holdFor() is mandatory otherwise PRS doesn't have any limit and increases until system crash
tAM_holdForSeconds = 10
##### for future use ######
tAM_duringInMin = 2
tAM_holdFor = 60
tAM_throughput = 100
tAM_iterations = 100
tAM_concurrency = 10
################ Scenario 1 >> End...! ################

################ Scenario 2 >> Inject Resolving Message ################
rM_showingLimit = 1000
rM_dropDownSortValue = 100
rM_status = reviewed
rM_resolved = true
# Pause for a given duration
rM_nothingFor = 5
# Injects a given number of users with a linear ramp over a given duration
rM_rampUp = 5
rM_rampUsersDuringInMin = 2
# Injects users at a constant rate, defined in users per second
rM_constantUsersPerSec = 50
rM_constantUsersPerSecDuration = 10
# Injects a given number of users at once
rM_atOnce = 10
# Injects users from starting rate to target rate, defined in users per second, during a given duration. Users will be injected at regular intervals
rM_minRampUsersPerSec = 1
rM_maxRampUsersPerSec = 50
rM_rampUsersPerSecDuringInMin = 2
# Injects a given number of users following a smooth approximation of the heaviside step function stretched to a given duration
rM_heaviideUsers = 5
rM_heavisideUsersDuringInSeconds = 60
# Injects a given number of users with a linear ramp over a given duration
rM_seqDuringInSec = 5
# constant Concurrent Users
rM_constantConcurrentUsers = 2
rM_constantConcurrentUsersDuringInSec = 30
# ramp Concurrent Users
rM_minRampConcurrentUsers = 1
rM_maxRampConcurrentUsers = 2
rM_rampConcurrentUsersDuringInSec = 30
# Throttling ensures required req/s will be accomplished. Scenario should run forever, numberOfRepetitions=-1
rM_reachRps = 50
rM_reachRpsDurationMinutes = 5
# holdFor() is mandatory otherwise PRS doesn't have any limit and increases until system crash
rM_holdForSeconds = 10
##### for future use ######
rM_duringInMin = 2
rM_holdFor = 60
rM_throughput = 100
rM_iterations = 100
rM_concurrency = 10
################ Scenario 2 >> End...! ################

################ Scenario 3 >> Inject Resolve Single Alert ################
rSA_showingLimit = 1000
rSA_dropDownSortValue = 100
rSA_status = breach
rSA_resolved = true
# Pause for a given duration
rSA_nothingFor = 5
# Injects a given number of users with a linear ramp over a given duration
rSA_rampUp = 5
rSA_rampUsersDuringInMin = 2
# Injects users at a constant rate, defined in users per second
rSA_constantUsersPerSec = 50
rSA_constantUsersPerSecDuration = 10
# Injects a given number of users at once
rSA_atOnce = 2
# Injects users from starting rate to target rate, defined in users per second, during a given duration. Users will be injected at regular intervals
rSA_minRampUsersPerSec = 1
rSA_maxRampUsersPerSec = 50
rSA_rampUsersPerSecDuringInMin = 2
# Injects a given number of users following a smooth approximation of the heaviside step function stretched to a given duration
rSA_heavisideUsers = 5
rSA_heavisideUsersDuringInSeconds = 60
# Injects a given number of users with a linear ramp over a given duration
rSA_seqDuringInSec = 5
# constant Concurrent Users
rSA_constantConcurrentUsers = 2
rSA_constantConcurrentUsersDuringInSec = 30
# ramp Concurrent Users
rSA_minRampConcurrentUsers = 1
rSA_maxRampConcurrentUsers = 2
rSA_rampConcurrentUsersDuringInSec = 30
# Throttling ensures required req/s will be accomplished. Scenario should run forever, numberOfRepetitions=-1
rSA_reachRps = 50
rSA_reachRpsDurationMinutes = 5
# holdFor() is mandatory otherwise PRS doesn't have any limit and increases until system crash
rSA_holdForSeconds = 10
##### for future use ######
rSA_duringInMin = 2
rSA_holdFor = 60
rSA_throughput = 100
rSA_iterations = 100
rSA_concurrency = 10
################ Scenario 3 >> End...! ################

################ Scenario 4 >> Inject Random Sampling ################
rS_dropDownSortValue = 1000
rS_status = reviewed
rS_resolved = true
# Pause for a given duration
rS_nothingFor = 5
# Injects a given number of users with a linear ramp over a given duration
rS_rampUp = 5
rS_rampUsersDuringInMin = 2
# Injects users at a constant rate, defined in users per second
rS_constantUsersPerSec = 50
rS_constantUsersPerSecDuration = 10
# Injects a given number of users at once
rS_atOnce = 2
# Injects users from starting rate to target rate, defined in users per second, during a given duration. Users will be injected at regular intervals
rS_minRampUsersPerSec = 1
rS_maxRampUsersPerSec = 50
rS_rampUsersPerSecDuringInMin = 2
# Injects a given number of users following a smooth approximation of the heaviside step function stretched to a given duration
rS_heavisideUsers = 5
rS_heavisideUsersDuringInSeconds = 60
# Injects a given number of users with a linear ramp over a given duration
rS_seqDuringInSec = 5
# constant Concurrent Users
rS_constantConcurrentUsers = 2
rS_constantConcurrentUsersDuringInSec = 30
# ramp Concurrent Users
rS_minRampConcurrentUsers = 1
rS_maxRampConcurrentUsers = 2
rS_rampConcurrentUsersDuringInSec = 30
# Throttling ensures required req/s will be accomplished. Scenario should run forever, numberOfRepetitions=-1
rS_reachRps = 50
rS_reachRpsDurationMinutes = 5
# holdFor() is mandatory otherwise PRS doesn't have any limit and increases until system crash
rS_holdForSeconds = 10
##### for future use ######
rS_duringInMin = 2
rS_holdFor = 60
rS_throughput = 100
rS_iterations = 100
rS_concurrency = 10
################ Scenario 4 >> End...! ################

################ Scenario 5 >> Inject Bulk Resolution ################
bR_numberOfMessages = 10
bR_dropDownSortValue = 1000
bR_status = reviewed
bR_resolved = true
# Pause for a given duration
bR_nothingFor = 5
# Injects a given number of users with a linear ramp over a given duration
bR_rampUp = 5
bR_rampUsersDuringInMin = 2
# Injects users at a constant rate, defined in users per second
bR_constantUsersPerSec = 50
bR_constantUsersPerSecDuration = 10
# Injects a given number of users at once
bR_atOnce = 10
# Injects users from starting rate to target rate, defined in users per second, during a given duration. Users will be injected at regular intervals
bR_minRampUsersPerSec = 1
bR_maxRampUsersPerSec = 50
bR_rampUsersPerSecDuringInMin = 2
# Injects a given number of users following a smooth approximation of the heaviside step function stretched to a given duration
bR_heavisideUsers = 5
bR_heavisideUsersDuringInSeconds = 60
# Injects a given number of users with a linear ramp over a given duration
bR_seqDuringInSec = 5
# constant Concurrent Users
bR_constantConcurrentUsers = 2
bR_constantConcurrentUsersDuringInSec = 30
# ramp Concurrent Users
bR_minRampConcurrentUsers = 1
bR_maxRampConcurrentUsers = 2
bR_rampConcurrentUsersDuringInSec = 30
# Throttling ensures required req/s will be accomplished. Scenario should run forever, numberOfRepetitions=-1
bR_reachRps = 50
bR_reachRpsDurationMinutes = 5
# holdFor() is mandatory otherwise PRS doesn't have any limit and increases until system crash
bR_holdForSeconds = 10
##### for future use ######
bR_duringInMin = 2
bR_holdFor = 60
bR_throughput = 100
bR_iterations = 100
bR_concurrency = 10
################ Scenario 5 >> End...! ################

################ Scenario 6 >> Inject Bulk Add Manual Alert ################
bAMA_numberOfMessages = 500
bAMA_dropDownSortValue = 1000
bAMA_status = reviewed
bAMA_resolved = true
# Pause for a given duration
bAMA_nothingFor = 5
# Injects a given number of users with a linear ramp over a given duration
bAMA_rampUp = 5
bAMA_rampUsersDuringInMin = 2
# Injects users at a constant rate, defined in users per second
bAMA_constantUsersPerSec = 50
bAMA_constantUsersPerSecDuration = 10
# Injects a given number of users at once
bAMA_atOnce = 2
# Injects users from starting rate to target rate, defined in users per second, during a given duration. Users will be injected at regular intervals
bAMA_minRampUsersPerSec = 1
bAMA_maxRampUsersPerSec = 50
bAMA_rampUsersPerSecDuringInMin = 2
# Injects a given number of users following a smooth approximation of the heaviside step function stretched to a given duration
bAMA_heavisideUsers = 5
bAMA_heavisideUsersDuringInSeconds = 60
# Injects a given number of users with a linear ramp over a given duration
bAMA_seqDuringInSec = 5
# constant Concurrent Users
bAMA_constantConcurrentUsers = 2
bAMA_constantConcurrentUsersDuringInSec = 30
# ramp Concurrent Users
bAMA_minRampConcurrentUsers = 1
bAMA_maxRampConcurrentUsers = 2
bAMA_rampConcurrentUsersDuringInSec = 30
# Throttling ensures required req/s will be accomplished. Scenario should run forever, numberOfRepetitions=-1
bAMA_reachRps = 50
bAMA_reachRpsDurationMinutes = 5
# holdFor() is mandatory otherwise PRS doesn't have any limit and increases until system crash
bAMA_holdForSeconds = 10
##### for future use ######
bAMA_duringInMin = 2
bAMA_holdFor = 60
bAMA_throughput = 100
bAMA_iterations = 100
bAMA_concurrency = 10
################ Scenario 6 >> End...! ################

#Base Line Test
Builder1_ResolveAMessage_atOnce = 20
Builder2_ResolveSingleAlert_atOnce = 20
Builder3_RandomSampling_atOnce = 10
Builder4_BulkAddManualAlert_atOnce = 2
Builder5_BulkResolution_atOnce = 2
Builder6_ExportMessages_atOnce = 10
Builder7_ResolveAMessage_rampUp = 50
Builder7_ResolveAMessage_during = 180
Builder8_ResolveSingleAlert = 50
Builder9_RandomSampling = 40
Builder10_BulkAddManualAlert = 4
Builder11_BulkResolution = 4
Builder12_ExportMessages = 10

############## Load Balance SetUp End ##############